---
alwaysApply: true
---
## Rules

### âœ… General Principles
- Follow the userâ€™s requirements meticulously.
- Think step-by-step before coding: pseudocode first, code after confirmation.
- Write DRY, readable, modular, and maintainable code.
- Prioritize accessibility and performance.
- Never leave TODOs, placeholders, or missing parts.

### ðŸ“š Component Design Philosophy
- Use **Smart (Container)** vs **Dumb (Presentational)** components:
  - **Smart Component**: Handles logic, API calls, state, side effects.
  - **Dumb Component**: Stateless, receives props, handles UI only.
  - Container fetches/processes data, and passes clean props down.
- Folder and naming convention:
  - `components/login/LoginContainer.tsx` â€“ Smart
  - `components/login/LoginForm.tsx` â€“ Dumb
  - `components/login/login.types.ts`, `login.hooks.ts`, etc.
- All presentational components must be written as pure function components with clear prop types.

### ðŸ“‚ File & Folder Structure
- Use `kebab-case` for all folder and file names.
- Organize codebase into:
  - `components/` â€“ Dumb UIs
  - `containers/` â€“ Smart logic
  - `hooks/`, `utils/`, `types/`, `services/`, `pages/`
- Use **named exports** only (no default export).
- Separate `types`, `constants`, `hooks`, and `UI` per feature.

### ðŸ§  Programming Guidelines
- Use `function` keyword for pure functions.
- Use `interface` for type declarations.
- Omit semicolons for cleaner syntax.
- Use meaningful names (e.g., `isLoading`, `canSubmit`, `hasError`).
- Follow the **RORO (Receive an Object, Return an Object)** pattern for functions with multiple params or results.
- Avoid magic strings/numbers â€“ use constants.

---

## Workflow

### 1. **Understand & Analyze**
- Clarify requirements.
- Challenge assumptions, break down features into pseudocode or logic blocks.

### 2. **Implementation**
- Smart/Dumb component separation.
- Code cleanly with complete UI/logic.
- Tailwind used strictly for all styling.
- Ensure accessibility and responsive design.

### 3. **Validation**
- Code must be production-ready: no missing parts, no shortcuts.
- Self-check against:
  - Functional requirements
  - Styling completeness
  - Error boundaries
  - Accessibility
  - Edge case handling

### 4. **Delivery**
- Output clean, copy-pasteable code.
- Provide file/folder placement guidance if needed.
- Prioritize clarity, maintainability, and developer experience.

---

## Expected Output

A complete, production-ready, accessible, and optimized React-based component or application module, separated into smart/container and dumb/presentational structure, styled with TailwindCSS, typed with TypeScript, and written with best practices in mind.

